dataset <- read_delim("human-development-index-vs-gdp-per-capita.csv")
names(dataset)[names(dataset) == "Human Development Index"] <- "HDI"
names(dataset)[names(dataset) == "Population (historical estimates)"] <- "Population"
dataset <- dataset %>%
group_by(Code) %>%
fill(Continent, .direction = "up") %>%
fill(Continent) %>%
ungroup() %>%
group_by(Year)
dataset <- subset(dataset, complete.cases(HDI, `GDP per capita, PPP (constant 2017 international $)`))
# Define UI for application that draws a histogram
ui <- fluidPage(
tabsetPanel(
tabPanel("Summary", tabPanel(
"Conclusion",
h1("Overall Takeaways"),
h3("Research questions we were answering: "),
HTML("<ul>
<li>What state, on average, has the cheapest college tuition for 4-years, public universities, and
what state has the most expensive?</li>
<li>Do private universities cost more than public universities?</li>
<li>For both private and public universities, has the cost of college increased over time on average?</li>
</ul>"))),
tabPanel("Plot", mainPanel(
titlePanel("Old Faithful Geyser Data"),
sidebarLayout(
sidebarPanel(
sliderInput("Year", "Year",
min = 1990,
max = 2020,
value = 2020),
sliderInput("Population", "Population more than (10^n)",
min = 0,
max = 9,
step = 0.5,
value = 5)
),
# Show a plot of the generated distribution
mainPanel(plotOutput("distPlot"), textOutput("textPlot")),
)
)),
tabPanel("Table", tableOutput("table"))
),
# Application title
# Sidebar with a slider input for number of bins
)
# Define server logic required to draw a histogram
library(ggrepel)
server <- function(input, output) {
output$textPlot <- renderText("qwqqqqqqqqqqqqqqq")
output$distPlot <- renderPlot({
dataset <- dataset %>%
filter(Population >= 10 ^ input$Population, Year == input$Year)
ggplot(dataset, aes(x = `GDP per capita, PPP (constant 2017 international $)`, y = HDI, group = Year)) +
geom_point(aes(size = Population, color = Year)) +
geom_text_repel(aes(label = Entity)) +
geom_smooth()
# generate bins based on input$bins from ui.R
# x    <- faithful[, 2]
# bins <- seq(min(x), max(x), length.out = input$bins + 1)
#
# # draw the histogram with the specified number of bins
# hist(x, breaks = bins, col = 'darkgray', border = 'white',
#      xlab = 'Waiting time to next eruption (in mins)',
#      main = 'Histogram of waiting times')
}, height = 800, width = 1200)
}
# Run the application
shinyApp(ui = ui, server = server)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(tidyverse)
library(ggplot2)
dataset <- read_delim("human-development-index-vs-gdp-per-capita.csv")
names(dataset)[names(dataset) == "Human Development Index"] <- "HDI"
names(dataset)[names(dataset) == "Population (historical estimates)"] <- "Population"
dataset <- dataset %>%
group_by(Code) %>%
fill(Continent, .direction = "up") %>%
fill(Continent) %>%
ungroup() %>%
group_by(Year)
dataset <- subset(dataset, complete.cases(HDI, `GDP per capita, PPP (constant 2017 international $)`))
# Define UI for application that draws a histogram
ui <- fluidPage(
tabsetPanel(
tabPanel("Summary", tabPanel(
"Conclusion",
h1("Overall Takeaways"),
h3("Research questions we were answering: "),
HTML("<ul>
<li>What state, on average, has the cheapest college tuition for 4-years, public universities, and
what state has the most expensive?</li>
<li>Do private universities cost more than public universities?</li>
<li>For both private and public universities, has the cost of college increased over time on average?</li>
</ul>"))),
tabPanel("Plot", mainPanel(
titlePanel("Old Faithful Geyser Data"),
sidebarLayout(
sidebarPanel(
sliderInput("Year", "Year",
min = 1990,
max = 2020,
value = 2020),
sliderInput("Population", "Population more than (10^n)",
min = 0,
max = 9,
step = 0.5,
value = 5)
),
# Show a plot of the generated distribution
mainPanel(textOutput("textPlot"), plotOutput("distPlot")),
)
)),
tabPanel("Table", tableOutput("table"))
),
# Application title
# Sidebar with a slider input for number of bins
)
# Define server logic required to draw a histogram
library(ggrepel)
server <- function(input, output) {
output$textPlot <- renderText("qwqqqqqqqqqqqqqqq")
output$distPlot <- renderPlot({
dataset <- dataset %>%
filter(Population >= 10 ^ input$Population, Year == input$Year)
ggplot(dataset, aes(x = `GDP per capita, PPP (constant 2017 international $)`, y = HDI, group = Year)) +
geom_point(aes(size = Population, color = Year)) +
geom_text_repel(aes(label = Entity)) +
geom_smooth()
# generate bins based on input$bins from ui.R
# x    <- faithful[, 2]
# bins <- seq(min(x), max(x), length.out = input$bins + 1)
#
# # draw the histogram with the specified number of bins
# hist(x, breaks = bins, col = 'darkgray', border = 'white',
#      xlab = 'Waiting time to next eruption (in mins)',
#      main = 'Histogram of waiting times')
}, height = 800, width = 1200)
}
# Run the application
shinyApp(ui = ui, server = server)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(tidyverse)
library(ggplot2)
dataset <- read_delim("human-development-index-vs-gdp-per-capita.csv")
names(dataset)[names(dataset) == "Human Development Index"] <- "HDI"
names(dataset)[names(dataset) == "Population (historical estimates)"] <- "Population"
dataset <- dataset %>%
group_by(Code) %>%
fill(Continent, .direction = "up") %>%
fill(Continent) %>%
ungroup() %>%
group_by(Year)
dataset <- subset(dataset, complete.cases(HDI, `GDP per capita, PPP (constant 2017 international $)`))
# Define UI for application that draws a histogram
ui <- fluidPage(
tabsetPanel(
tabPanel("Summary", tabPanel(
"Conclusion",
h1("Overall Takeaways"),
h3("Research questions we were answering: "),
HTML("<ul>
<li>What state, on average, has the cheapest college tuition for 4-years, public universities, and
what state has the most expensive?</li>
<li>Do private universities cost more than public universities?</li>
<li>For both private and public universities, has the cost of college increased over time on average?</li>
</ul>"))),
tabPanel("Plot", mainPanel(
titlePanel("Old Faithful Geyser Data"),
sidebarLayout(
sidebarPanel(
sliderInput("Year", "Year",
min = 1990,
max = 2020,
value = 2020),
sliderInput("Population", "Population more than (10^n)",
min = 0,
max = 9,
step = 0.5,
value = 5)
),
# Show a plot of the generated distribution
mainPanel(textOutput("textPlot"), plotOutput("distPlot")),
)
)),
tabPanel("Table", tableOutput("table"))
),
# Application title
# Sidebar with a slider input for number of bins
)
# Define server logic required to draw a histogram
library(ggrepel)
server <- function(input, output) {
output$textPlot <- renderText("Time Period")
output$distPlot <- renderPlot({
dataset <- dataset %>%
filter(Population >= 10 ^ input$Population, Year == input$Year)
ggplot(dataset, aes(x = `GDP per capita, PPP (constant 2017 international $)`, y = HDI, group = Year)) +
geom_point(aes(size = Population, color = Year)) +
geom_text_repel(aes(label = Entity)) +
geom_smooth()
# generate bins based on input$bins from ui.R
# x    <- faithful[, 2]
# bins <- seq(min(x), max(x), length.out = input$bins + 1)
#
# # draw the histogram with the specified number of bins
# hist(x, breaks = bins, col = 'darkgray', border = 'white',
#      xlab = 'Waiting time to next eruption (in mins)',
#      main = 'Histogram of waiting times')
}, height = 800, width = 1200)
}
# Run the application
shinyApp(ui = ui, server = server)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(tidyverse)
library(ggplot2)
dataset <- read_delim("human-development-index-vs-gdp-per-capita.csv")
names(dataset)[names(dataset) == "Human Development Index"] <- "HDI"
names(dataset)[names(dataset) == "Population (historical estimates)"] <- "Population"
dataset <- dataset %>%
group_by(Code) %>%
fill(Continent, .direction = "up") %>%
fill(Continent) %>%
ungroup() %>%
group_by(Year)
dataset <- subset(dataset, complete.cases(HDI, `GDP per capita, PPP (constant 2017 international $)`))
# Define UI for application that draws a histogram
ui <- fluidPage(
tabsetPanel(
tabPanel("Summary", tabPanel(
"Conclusion",
h1("Overall Takeaways"),
h3("Research questions we were answering: "),
HTML("<ul>
<li>What state, on average, has the cheapest college tuition for 4-years, public universities, and
what state has the most expensive?</li>
<li>Do private universities cost more than public universities?</li>
<li>For both private and public universities, has the cost of college increased over time on average?</li>
</ul>"))),
tabPanel("Plot", mainPanel(
titlePanel("Old Faithful Geyser Data"),
sidebarLayout(
sidebarPanel(
checkboxInput("lineShow", "Show trend line")
sliderInput("Year", "Year",
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(tidyverse)
library(ggplot2)
dataset <- read_delim("human-development-index-vs-gdp-per-capita.csv")
names(dataset)[names(dataset) == "Human Development Index"] <- "HDI"
names(dataset)[names(dataset) == "Population (historical estimates)"] <- "Population"
dataset <- dataset %>%
group_by(Code) %>%
fill(Continent, .direction = "up") %>%
fill(Continent) %>%
ungroup() %>%
group_by(Year)
dataset <- subset(dataset, complete.cases(HDI, `GDP per capita, PPP (constant 2017 international $)`))
# Define UI for application that draws a histogram
ui <- fluidPage(
tabsetPanel(
tabPanel("Summary", tabPanel(
"Conclusion",
h1("Overall Takeaways"),
h3("Research questions we were answering: "),
HTML("<ul>
<li>What state, on average, has the cheapest college tuition for 4-years, public universities, and
what state has the most expensive?</li>
<li>Do private universities cost more than public universities?</li>
<li>For both private and public universities, has the cost of college increased over time on average?</li>
</ul>"))),
tabPanel("Plot", mainPanel(
titlePanel("Old Faithful Geyser Data"),
sidebarLayout(
sidebarPanel(
checkboxInput("lineShow", "Show trend line"),
sliderInput("Year", "Year",
min = 1990,
max = 2020,
value = 2020),
sliderInput("Population", "Population more than (10^n)",
min = 0,
max = 9,
step = 0.5,
value = 5)
),
# Show a plot of the generated distribution
mainPanel(textOutput("textPlot"), plotOutput("distPlot")),
)
)),
tabPanel("Table", tableOutput("table"))
),
# Application title
# Sidebar with a slider input for number of bins
)
# Define server logic required to draw a histogram
library(ggrepel)
server <- function(input, output) {
output$textPlot <- renderText("Time Period")
output$distPlot <- renderPlot({
dataset <- dataset %>%
filter(Population >= 10 ^ input$Population, Year == input$Year)
ggplot(dataset, aes(x = `GDP per capita, PPP (constant 2017 international $)`, y = HDI, group = Year)) +
geom_point(aes(size = Population, color = Year)) +
geom_text_repel(aes(label = Entity)) +
geom_smooth()
# generate bins based on input$bins from ui.R
# x    <- faithful[, 2]
# bins <- seq(min(x), max(x), length.out = input$bins + 1)
#
# # draw the histogram with the specified number of bins
# hist(x, breaks = bins, col = 'darkgray', border = 'white',
#      xlab = 'Waiting time to next eruption (in mins)',
#      main = 'Histogram of waiting times')
}, height = 800, width = 1200)
}
# Run the application
shinyApp(ui = ui, server = server)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(tidyverse)
library(ggplot2)
dataset <- read_delim("human-development-index-vs-gdp-per-capita.csv")
names(dataset)[names(dataset) == "Human Development Index"] <- "HDI"
names(dataset)[names(dataset) == "Population (historical estimates)"] <- "Population"
dataset <- dataset %>%
group_by(Code) %>%
fill(Continent, .direction = "up") %>%
fill(Continent) %>%
ungroup() %>%
group_by(Year)
dataset <- subset(dataset, complete.cases(HDI, `GDP per capita, PPP (constant 2017 international $)`))
# Define UI for application that draws a histogram
ui <- fluidPage(
tabsetPanel(
tabPanel("Summary", tabPanel(
"Conclusion",
h1("Overall Takeaways"),
h3("Research questions we were answering: "),
HTML("<ul>
<li>What state, on average, has the cheapest college tuition for 4-years, public universities, and
what state has the most expensive?</li>
<li>Do private universities cost more than public universities?</li>
<li>For both private and public universities, has the cost of college increased over time on average?</li>
</ul>"))),
tabPanel("Plot", mainPanel(
titlePanel("Old Faithful Geyser Data"),
sidebarLayout(
sidebarPanel(
checkboxInput("lineShow", "Show trend line"),
sliderInput("Year", "Year",
min = 1990,
max = 2020,
value = 2020),
sliderInput("Population", "Population more than (10^n)",
min = 0,
max = 9,
step = 0.5,
value = 5)
),
# Show a plot of the generated distribution
mainPanel(textOutput("textPlot"), plotOutput("distPlot")),
)
)),
tabPanel("Table", tableOutput("table"))
),
# Application title
# Sidebar with a slider input for number of bins
)
# Define server logic required to draw a histogram
library(ggrepel)
server <- function(input, output) {
output$textPlot <- renderText("Time Period")
output$distPlot <- renderPlot({
dataset <- dataset %>%
filter(Population >= 10 ^ input$Population, Year == input$Year)
ggplot(dataset, aes(x = `GDP per capita, PPP (constant 2017 international $)`, y = HDI, group = Year)) +
geom_point(aes(size = Population, color = Year)) +
geom_text_repel(aes(label = Entity)) +
geom_smooth()
# generate bins based on input$bins from ui.R
# x    <- faithful[, 2]
# bins <- seq(min(x), max(x), length.out = input$bins + 1)
#
# # draw the histogram with the specified number of bins
# hist(x, breaks = bins, col = 'darkgray', border = 'white',
#      xlab = 'Waiting time to next eruption (in mins)',
#      main = 'Histogram of waiting times')
}, height = 800, width = 1200)
}
# Run the application
shinyApp(ui = ui, server = server)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(tidyverse)
library(ggplot2)
dataset <- read_delim("human-development-index-vs-gdp-per-capita.csv")
names(dataset)[names(dataset) == "Human Development Index"] <- "HDI"
names(dataset)[names(dataset) == "Population (historical estimates)"] <- "Population"
dataset <- dataset %>%
group_by(Code) %>%
fill(Continent, .direction = "up") %>%
fill(Continent) %>%
ungroup() %>%
group_by(Year)
dataset <- subset(dataset, complete.cases(HDI, `GDP per capita, PPP (constant 2017 international $)`))
# Define UI for application that draws a histogram
ui <- fluidPage(
tabsetPanel(
tabPanel("Summary", tabPanel(
"Conclusion",
h1("Overall Takeaways"),
h3("Research questions we were answering: "),
HTML("<ul>
<li>What state, on average, has the cheapest college tuition for 4-years, public universities, and
what state has the most expensive?</li>
<li>Do private universities cost more than public universities?</li>
<li>For both private and public universities, has the cost of college increased over time on average?</li>
</ul>"))),
tabPanel("Plot", mainPanel(
titlePanel("Old Faithful Geyser Data"),
sidebarLayout(
sidebarPanel(
checkboxInput("lineShow", "Show trend line"),
sliderInput("Year", "Year",
min = 1990,
max = 2020,
value = 2020),
sliderInput("Population", "Population more than (10^n)",
min = 0,
max = 9,
step = 0.5,
value = 5)
),
# Show a plot of the generated distribution
mainPanel(textOutput("textPlot"), plotOutput("distPlot")),
)
)),
tabPanel("Table", tableOutput("table"))
),
# Application title
# Sidebar with a slider input for number of bins
)
# Define server logic required to draw a histogram
library(ggrepel)
server <- function(input, output) {
dataset <- dataset %>%
filter(Population >= 10 ^ input$Population, Year == input$Year)
output$textPlot <- renderText(paste("Data in year", input$Year))
output$distPlot <- renderPlot({
ggplot(dataset, aes(x = `GDP per capita, PPP (constant 2017 international $)`, y = HDI, group = Year)) +
geom_point(aes(size = Population, color = Year)) +
geom_text_repel(aes(label = Entity)) +
geom_smooth()
# generate bins based on input$bins from ui.R
# x    <- faithful[, 2]
# bins <- seq(min(x), max(x), length.out = input$bins + 1)
#
# # draw the histogram with the specified number of bins
# hist(x, breaks = bins, col = 'darkgray', border = 'white',
#      xlab = 'Waiting time to next eruption (in mins)',
#      main = 'Histogram of waiting times')
}, height = 800, width = 1200)
}
# Run the application
shinyApp(ui = ui, server = server)
